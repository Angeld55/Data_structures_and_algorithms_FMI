
# Сегментно дърво

Сегментното дърво е структура от данни, която позволява отговаряне на заявки за интервални заявки върху масив ефективно и достатъчно гъвкава, че да позволява промени върху масива.

![enter image description here](https://i.ibb.co/CKWssvK/segment-tree1-drawio.png)

Важно е да се отбележи, че използваме линейно количество допълнителна памет.
Имаме 1 връх на първо ниво, 2 върха на второ ниво, 4 на трето ниво, докато не стигнат n върха.

![enter image description here](https://i.ibb.co/FYqcRgQ/sum-segment-tree.png)

Важно е да се отбележи, че ако n не е степен на двойката, то не всички нива са пълни.
За повечето задачи това, което трябва да имплементираме е:

 - Построяването на дървото (construction)
 - Заявка с въпрос (question query)
 - Заявка за обновяване на колекцията (update query)

### Пример 1: Заявки за сума на елементите на подмасив (Sum queries)
Заявки за сумата на елементите на подмасив. Използваме сегменто дърво, за да постигнем логаритмична сложност по време и ленейна по памет.

![enter image description here](https://i.ibb.co/C198gMr/segment-tree1-drawio-2.png)

С малка модификация може да се постигне структура за заявки за най-голямото число в масив. 

### Пример 2: Заявки за к-ти елемент x в масив. (K-th queries)

Искаме да отговаряме на заявки: На кой индекс е к-тото срещане на x.
Важно е да отбележим, че елементът x трябва да е известен преди създаването на структурата.

![enter image description here](https://i.ibb.co/JjwC3VJ/segment-tree1-drawio-7.png)

### Сегментно дърво, което във всеки връх пази елементите на подмасивите
Каква памет се би се искало? Интуитивно е O(n^2), но всъщност е  O(n * log(n)).
Всеки елемент попада в O(log(n)) сегмента.
Тези елементи могат да се пазят в различни колекции - сортиран масив, map, set и други.

### Пример 3: Заявки за брой елементи между позиция X и позиция Y в масив (само от уникални елементи), които са в интервала [L, R].
В примера не се изисква заявки за промяна на масива, за това на всеки връх ще пазим сортираните елементи от подмасива. 

![enter image description here](https://i.ibb.co/kVL1XHg/segment-tree1-drawio-5.png)

<h3>Задачи</h3>
Напишете структура за заявки върху масив (+ обновяване) за:

**Задача 1:** Намиране на най-малко общо кратно на подмасив.

**Задача 2:** Намиране на най-малкото число в подасив, което е по-голямо от подаденото като параметър на заявката.

**Задача 3:** Да се модифицира пример 3, така че да се поддържа и заявка за обновяване на масива.
